{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nrequire(\"ggplot2\")\nrequire(\"lunar\")\nrequire(\"dplyr\")\nrequire(\"lubridate\")\nrequire(\"maps\")\nrequire(\"leaflet\")\nrequire(\"googleVis\")\nlibrary(shiny)\n\nload(\"data/crimes.RData\")\n\nshinyServer(function(input, output) {\n\n  output$distPlot <- renderPlot({\n\n    # plots.density.by_moon <- \n    ggplot(data = crimes.by_day,\n           aes(x = cnt, color = moon)) +\n    geom_density(show.legend = F) +\n    stat_density(geom = \"line\",\n                 position = \"identity\") +\n    #scale_color_brewer(type = \"qual\", guide = \"legend\") +\n    scale_color_manual(values = c(\"#e41a1c\", \"#377eb8\", \"#4daf4a\", \"#984ea3\")) +\n    geom_density(data = subset(crimes.by_day, moon == \"Full\"),\n                 aes(x = cnt),\n                 color = \"#4daf4a\",\n                 size = 1.2,\n                 show.legend = F) +\n    ggtitle(\"Density of crimes per day\") +\n    ylab(\"\") + xlab(\"\")\n  })\n  \n  runSimsFull <- eventReactive(input$resim, {\n      \n      full.ds <- subset(crimes.by_day, moon == \"Full\")\n      full.sims <- matrix(data = sample(full.ds$cnt,\n                                        input$sims * input$sample,\n                                        replace = T),\n                          nrow = input$sims,\n                          ncol = input$sample)\n      full.means <- apply(full.sims, 1, mean)\n  }, ignoreNULL = FALSE)\n  \n  runSimsNonFull <- eventReactive(input$resim, {\n      \n      nonfull.ds <- subset(crimes.by_day, moon != \"Full\")\n      nonfull.sims <- matrix(data = sample(nonfull.ds$cnt,\n                                           input$sims * input$sample,\n                                           replace = T),\n                             nrow = input$sims,\n                             ncol = input$sample)\n      nonfull.means <- apply(nonfull.sims, 1, mean)\n  }, ignoreNULL = FALSE)\n  \n  output$normPlot <- renderPlot({\n    \n    full.means <- runSimsFull()\n    nonfull.means <- runSimsNonFull()\n    ggplot() +\n    geom_density(data = as.data.frame(full.means),\n                 aes(x = full.means),\n                 color = \"#4daf4a\",\n                 size = 1.2,\n                 show.legend = F) +\n    stat_density(data = as.data.frame(full.means),\n                 aes(x = full.means, color = \"Full\"),\n                 geom = \"line\",\n                 position = \"identity\") +\n    geom_vline(xintercept = mean(full.means) + c(-1,1) * qnorm(.975) * sd(full.means),\n               linetype = \"dashed\",\n               color = \"#4daf4a\") +\n    geom_vline(xintercept = mean(full.means),\n               color = \"#4daf4a\") +\n    geom_density(data = as.data.frame(nonfull.means),\n                 aes(x = nonfull.means),\n                 color = \"salmon\",\n                 show.legend = F) +\n    stat_density(data = as.data.frame(nonfull.means),\n                 aes(x = nonfull.means, color = \"Other\"),\n                 geom = \"line\",\n                 position = \"identity\") +\n    geom_vline(xintercept = mean(nonfull.means) + c(-1,1) * qnorm(.975) * sd(nonfull.means),\n               linetype = \"dashed\",\n               color = \"salmon\") +\n    geom_vline(xintercept = mean(nonfull.means),\n               color = \"salmon\") +\n    scale_colour_manual(name = \"moon\", \n                        values = c(\"Full\" = \"#4daf4a\", \"Other\"=\"salmon\"),\n                        labels = c(\"Full\", \"Other\"),\n                        guide = \"legend\") +\n    ggtitle(\"Density of simulated means of crimes per day\") +\n    xlab(\"\") + ylab(\"\")\n    \n  })\n  \n  \n  output$mapPlot <- renderLeaflet({\n      input$showonmap\n      chicago <- isolate({\n          plt <- colorFactor(c(\"#e41a1c\", \"#377eb8\", \"#4daf4a\", \"#984ea3\"), domain = levels(crimes.tidy$moon))\n          crimes.geo <- crimes.tidy %>%\n              filter(year == input$year & month == input$month & type == input$type &!is.na(lat) & !is.na(lon))\n          chicago <- leaflet(crimes.geo) %>%\n                     addTiles()  # Add default OpenStreetMap map tiles\n              # addLegend(position = \"topright\",\n              #           pal = plt,\n              #           values = ~moon,\n              #           opacity = .5,\n              #           title = \"Moon\") %>%\n              # addCircleMarkers(lng = ~lon,\n              #                  lat = ~lat,\n              #                  radius = 3,\n              #                  color = ~plt(moon),\n              #                  popup = ~type,\n              #                  opacity = .5)\n          if (nrow(crimes.geo) > 0) {\n              addMarkers(chicago,\n                         lng = ~lon,\n                         lat = ~lat,\n                         popup = ~type,\n                         clusterOptions = markerClusterOptions())\n          }\n          else {\n              setView(chicago,\n                      lng = -87.67617,\n                      lat = 41.77304,\n                      zoom = 10)\n          }\n      })\n      return(chicago)\n  })\n  \n  # Google chart\n  output$googlechart <- renderGvis({\n      if (!exists(\"crimes.by_yearmonth\")) {\n          crimes.by_yearmonth <- crimes.by_day %>%\n              #mutate(ym = as.numeric(as.POSIXct(paste(year, month, \"01\", sep = \"-\")))) %>%\n              mutate(ym = as.POSIXct(paste(year, month, \"01\", sep = \"-\"))) %>%\n              group_by(ym, moon) %>%\n              summarize(cnt = sum(cnt)) %>%\n              filter(!is.na(ym))\n      }\n      gvisAnnotationChart(crimes.by_yearmonth,\n                          datevar = \"ym\",\n                          numvar = \"cnt\",\n                          idvar = \"moon\",\n                          options = list(\n                              colors = \"['#e41a1c', '#377eb8', '#4daf4a', '#984ea3']\",\n                              width = 1100,\n                              height = 300,\n                              dateFormat = \"MMM yyyy\",\n                              numberFormats = \"#,###\",\n                              scaleFormat = \"#,###\",\n                              thickness = 2\n                          ),\n                          chartid = \"googlechart\")\n  })\n\n})\n",
    "created" : 1468411047378.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4281979724",
    "id" : "DA481E2C",
    "lastKnownWriteTime" : 1468325496,
    "last_content_update" : 1468325496,
    "path" : "D:/Coursera/data_science/gitrepo/DevelopingDataProducts/DDPCourseProject/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}